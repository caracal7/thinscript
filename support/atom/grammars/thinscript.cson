scopeName: "source.thin"
fileTypes: [
  "thin"
]
name: "thinscript"
foldingStartMarker: "\\{\\s*$"
foldingStopMarker: "^\\s*\\}"
firstLineMatch: "^#!/.*\\bthin\\b"
patterns: [
  {
    include: "#toplevel"
  }
]
repository:
  toplevel:
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#block"
      }
      {
        include: "#variable"
      }
      {
        include: "#cast"
      }
      {
        include: "#decorator"
      }
      {
        include: "#function"
      }
      {
        include: "#enum"
      }
      {
        include: "#class"
      }
      {
        name: "keyword.control.thin"
        match: "\\b(export|import|extern|declare)\\b"
      }
      {
        name: "keyword.thin"
        match: "\\b(function|class|interface|extends|implements|var|let|const)\\b"
      }
      {
        include: "#literal"
      }
    ]
  comment:
    patterns: [
      {
        name: "comment.thin"
        match: "//(?!\\!#).*$"
      }
      {
        name: "comment.thin"
        begin: "/\\*"
        end: "\\*/"
        patterns: [
          {
            match: "^\\s*\\*\\s*((@)param)\\s+([A-Za-z$_][\\w$]*)\\b"
            captures:
              "1":
                name: "storage.type.class.jsdoc"
              "2":
                name: "punctuation.definition.block.tag.jsdoc"
              "3":
                name: "variable.other.jsdoc"
          }
          {
            match: "^\\s*\\*\\s*((@)returns)\\b"
            captures:
              "1":
                name: "storage.type.class.jsdoc"
              "2":
                name: "punctuation.definition.block.tag.jsdoc"
          }
        ]
      }
    ]
  preprocessor:
    begin: "^\\s*((?://!)?#(?:define|undef|ifdef|if|elif|else|endif|warning|error))\\b"
    end: "$"
    beginCaptures:
      "1":
        name: "token.debug-token.preprocessor.thin"
    patterns: [
      {
        include: "#code"
      }
    ]
  variable:
    match: "\\b(?:(unsafe)\\s+)?(var|let|const)\\s+([A-Za-z$_][\\w$]*)\\s*(?:\\:\\s*(\\*?[A-Za-z$_][\\w$]*))?"
    captures:
      "1":
        name: "token.warn-token.unsafe.thin"
      "2":
        name: "keyword.thin"
      "3":
        name: "variable.local.thin"
      "4":
        name: "entity.name.type.thin"
  cast:
    patterns: [
      {
        match: "\\b(as)\\s+(\\*?[A-Za-z$_][\\w$]*)\\b"
        captures:
          "1":
            name: "keyword.control.cast.thin"
          "2":
            name: "entity.name.type.thin"
      }
    ]
  function:
    begin: "\\b(?:(extern|declare)\\s+)?(?:(unsafe)\\s+)?(function)\\b(?:\\s+([A-Za-z$_][\\w$]*)\\b)?\\s*\\("
    end: "\\)\\s*\\:\\s*(\\*?[A-Za-z$_][\\w$]*)\\b"
    beginCaptures:
      "1":
        name: "storage.modifier.thin"
      "2":
        name: "token.warn-token.unsafe.thin"
      "3":
        name: "storage.type.function.thin"
      "4":
        name: "entity.name.function.thin"
    endCaptures:
      "1":
        name: "entity.name.type.thin"
    patterns: [
      {
        include: "#parameter"
      }
    ]
  enum:
    begin: "\\b(enum)\\s+([A-Za-z$_][\\w$]*)\\s*\\{"
    end: "\\}"
    beginCaptures:
      "1":
        name: "storage.type.enum.thin"
      "2":
        name: "entity.name.type.enum.thin"
    patterns: [
      {
        include: "#comment"
      }
      {
        name: "constant.numeric.thin"
        match: "\\b([A-Za-z$_][\\w$]*)\\b"
      }
      {
        include: "#literal"
      }
    ]
  class:
    begin: "\\b(?:(export)\\s+)?(?:(extern|declare)\\s+)?(?:(public|private|protected)\\s+)?(class|interface)\\b(?:\\s+([A-Za-z$_][\\w$]*)\\b)\\s*\\{"
    end: "\\}"
    beginCaptures:
      "1":
        name: "keyword.control.export.thin"
      "2":
        name: "storage.modifier.thin"
      "3":
        name: "storage.modifier.thin"
      "4":
        name: "storage.type.class.thin"
      "5":
        name: "entity.name.class.thin"
    patterns: [
      {
        begin: "\\b(?:(unsafe)\\s+)?(operator)\\s+(%|&|\\*\\*?|\\+\\+?|\\-\\-?|\\/|<<?|==?|>>?|\\[\\]=?|\\^|\\||~)\\s*\\("
        end: "\\)(?:\\s*\\:\\s*(\\*?[A-Za-z$_][\\w$]*)\\b)?"
        beginCaptures:
          "1":
            name: "token.warn-token.unsafe.thin"
          "2":
            name: "keyword.thin"
          "3":
            name: "entity.name.function.thin"
        endCaptures:
          "1":
            name: "entity.name.type.thin"
        patterns: [
          {
            include: "#type"
          }
          {
            include: "#parameter"
          }
        ]
      }
      {
        begin: "\\b(?:(public|private|protected)\\s+)?(?:(static)\\s+)?(?:(unsafe)\\s+)?(?:(get|set)\\s+)?([A-Za-z$_][\\w$]*)\\b\\s*\\("
        end: "\\)(?:\\s*\\:\\s*(\\*?[A-Za-z$_][\\w$]*)\\b)?"
        beginCaptures:
          "1":
            name: "keyword.thin"
          "2":
            name: "keyword.thin"
          "3":
            name: "token.warn-token.unsafe.thin"
          "4":
            name: "keyword.thin"
          "5":
            name: "entity.name.function.thin"
        endCaptures:
          "1":
            name: "entity.name.type.thin"
        patterns: [
          {
            include: "#parameter"
          }
        ]
      }
      {
        begin: "\\b(?:(public|private|protected)\\s+)?(?:(static)\\s+)?(?:(unsafe)\\s+)?([A-Za-z$_][\\w$]*)\\s*(?=[:;])"
        beginCaptures:
          "1":
            name: "storage.modifier.thin"
          "2":
            name: "storage.modifier.thin"
          "3":
            name: "token.warn-token.unsafe.thin"
          "4":
            name: "variable.property.thin"
        end: "(?=[:;])"
      }
      {
        include: "#comment"
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#decorator"
      }
      {
        include: "#type"
      }
      {
        include: "#block"
      }
      {
        include: "#arrow"
      }
    ]
  decorator:
    begin: "^\\s*(@)([A-Za-z$_][\\w$]*)\\s*(?:\\()?"
    end: "\\)?\\s*$"
    beginCaptures:
      "1":
        name: "punctuation.decorator.thin"
      "2":
        name: "entity.name.function.thin"
    patterns: [
      {
        include: "#parameter"
      }
    ]
  type:
    match: "\\:\\s*(\\*?[A-Za-z$_][\\w$]*)\\b"
    captures:
      "1":
        name: "entity.name.type.thin"
  name:
    match: "(?!\\.)\\b([A-Za-z$_][\\w$]*)\\b\\s*(?=[;=\\:])"
    captures:
      "1":
        name: "variable.thin"
  block:
    begin: "(?:\\b(unsafe)\\s+)?\\{"
    beginCaptures:
      "1":
        name: "token.warn-token.unsafe.thin"
    end: "}"
    patterns: [
      {
        include: "#code"
      }
    ]
  arrow:
    begin: "(=>)"
    beginCaptures:
      "1":
        name: "keyword.control.thin"
    end: "\\s*;"
    patterns: [
      {
        include: "#code"
      }
    ]
  parameter:
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#type"
      }
      {
        include: "#name"
      }
      {
        include: "#literal"
      }
    ]
  code:
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#block"
      }
      {
        name: "keyword.control.thin"
        match: "\\b(if|else|while|break|continue|return)\\b"
      }
      {
        include: "#variable"
      }
      {
        include: "#cast"
      }
      {
        include: "#literal"
      }
      {
        match: "\\b([A-Za-z$_][\\w$]*)\\s*\\("
        captures:
          "1":
            name: "entity.name.function.thin"
      }
      {
        match: "\\b(new)\\s+([A-Za-z$_][\\w$]*)\\s*\\("
        captures:
          "1":
            name: "keyword.thin"
          "2":
            name: "entity.name.type.thin"
      }
      {
        name: "variable.object.thin"
        match: "\\b([A-Za-z$_][\\w$]*)\\b(?=\\s*\\.)"
      }
      {
        match: "\\b(?:\\.\\s*([A-Za-z$_][\\w$]*)|([A-Za-z$_][\\w$]*))\\b(?!\\()"
        captures:
          "1":
            name: "variable.property.thin"
          "2":
            name: "variable.thin"
      }
    ]
  literal:
    patterns: [
      {
        name: "constant.language.thin"
        match: "\\b(?:false|null|true|this)\\b"
      }
      {
        name: "constant.numeric.thin"
        match: "\\b[0-9]+\\b"
      }
      {
        name: "constant.numeric.thin"
        match: "\\b0x[0-9A-Fa-f]+\\b"
      }
      {
        name: "string.quoted.double.thin"
        begin: "\""
        end: "\""
        patterns: [
          {
            include: "#string-escaped-char"
          }
        ]
      }
      {
        name: "string.quoted.single.thin"
        begin: "'"
        end: "'"
        patterns: [
          {
            include: "#string-escaped-char"
          }
        ]
      }
      {
        name: "string.quoted.code.thin"
        begin: "```"
        end: "```"
        patterns: [
          {
            include: "#toplevel"
          }
        ]
      }
      {
        name: "string.quoted.block.thin"
        begin: "`"
        end: "`"
        patterns: [
          {
            include: "#string-escaped-char"
          }
        ]
      }
    ]
  "string-escaped-char":
    patterns: [
      {
        match: "\\\\(\\\\|[abefnprtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})"
        name: "constant.character.escape.thin"
      }
      {
        match: "\\\\."
        name: "invalid.illegal.escape.thin"
      }
    ]