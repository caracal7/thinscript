enum ConversionKind {
  IMPLICIT,
  EXPLICIT,
}

class Type {
  symbol: Symbol;
  pointerTo: Type;
  private cachedToString: string;
  private cachedPointerType: Type;

  isClass(): bool => this.symbol != null && this.symbol.kind == SymbolKind.TYPE_CLASS;

  isEnum(): bool => this.symbol != null && this.symbol.kind == SymbolKind.TYPE_ENUM;

  isInteger(): bool => this.symbol != null && (this.symbol.flags & SYMBOL_FLAG_NATIVE_INTEGER) != 0 || this.isEnum();

  isUnsigned(): bool => this.symbol != null && (this.symbol.flags & SYMBOL_FLAG_IS_UNSIGNED) != 0;

  isReference(): bool => this.pointerTo != null || this.symbol != null && (this.symbol.flags & SYMBOL_FLAG_IS_REFERENCE) != 0;

  underlyingType(context: CheckContext): Type => this.isEnum() ? context.intType : this.pointerTo != null ? context.uintType : this;

  integerBitCount(context: CheckContext): int => this.symbol != null ? this.symbol.byteSize * 8 : 0;

  integerBitMask(context: CheckContext): uint => ~0 as uint >> (32 - this.integerBitCount(context)) as uint;

  allocationSizeOf(context: CheckContext): int => this.symbol == null ? context.pointerByteSize : this.symbol.byteSize;

  allocationAlignmentOf(context: CheckContext): int => this.allocationSizeOf(context); // This is true right now

  variableSizeOf(context: CheckContext): int => this.isReference() ? context.pointerByteSize : this.symbol.byteSize;

  variableAlignmentOf(context: CheckContext): int => this.variableSizeOf(context); // This is true right now

  pointerType(): Type {
    var type = this.cachedPointerType;
    if (type == null) {
      type = new Type();
      type.pointerTo = this;
      this.cachedPointerType = type;
    }
    return type;
  }

  toString(): string {
    if (this.cachedToString == null) {
      this.cachedToString =
        this.pointerTo != null ? StringBuilder_new().appendChar('*').append(this.pointerTo.toString()).finish() :
        this.symbol.name;
    }
    return this.cachedToString;
  }

  findMember(name: string, hint: ScopeHint): Symbol {
    var symbol = this.symbol;
    return symbol != null && symbol.scope != null ? symbol.scope.findLocal(name, hint) : null;
  }

  hasInstanceMembers(): bool {
    var symbol = this.symbol;
    return symbol != null && (symbol.kind == SymbolKind.TYPE_CLASS || symbol.kind == SymbolKind.TYPE_NATIVE);
  }
}
