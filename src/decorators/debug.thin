/**
 * Eliminates debugging-only functions when compiling with the `NODEBUG` preprocessor flag.
 * Note that such functions must not exhibit side effects.
 * @param node The node being decorated
 * @param context Current checker context
 * @param decorator The respective decorator node
 */
function decorateDebug(node: Node, context: CheckContext, decorator: Node): void {
  assert(node.kind == NodeKind.FUNCTION);

  // Recover from invalid use
  if (node.functionReturnType().stringValue != "void") {
    context.log.error(decorator.decoratorName().range, "@debug cannot be used with functions specifying a return value");
    return;
  }

  if (context.isDebug) return;

  var body = node.functionBody();
  if (body == null || body.childCount() == 0) { // Import or already empty
    return;
  }

  // Clear the body
  var child = body.firstChild;
  while (child != null) {
    var next = child.nextSibling;;
    child.remove();
    child = next;
  }

  // TODO: Add a compiler optimization that removes empty functions and their respective calls.
}
