/**
 * Renames a function or class at compile time while leaving the external interface intact.
 * @param node The node being decorated
 * @param context Current checker context
 * @param decorator The respective decorator node
 */
function decorateRename(node: Node, context: CheckContext, decorator: Node): void {
  assert(node.kind == NodeKind.FUNCTION || node.kind == NodeKind.CLASS);

  var argument = decorator.decoratorFirstArgument();
  if (argument == null || argument.kind != NodeKind.STRING) {
    context.log.error(decorator.range, "@rename annotations must specify a new name as the first argument");
    return;
  }

  var name = node.stringValue;
  var newName = argument.stringValue;
  if (newName == name)
    return;

  // node.originalStringValue = name;
  // node.stringValue = newName;
}
